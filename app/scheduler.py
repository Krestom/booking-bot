import asyncio
import logging
from datetime import datetime, time as dt_time, timedelta
from aiogram import Bot
from app.database import get_today_bookings, update_booking_status
from app.url_generator import generate_booking_url
import os
from dotenv import load_dotenv
import random

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Selenium –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium import webdriver

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(dotenv_path="./.env")
bot = Bot(token=os.getenv('TG_TOKEN'))
CHROME_DRIVER_PATH = os.getenv('CHROME_DRIVER_PATH')

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
semaphore = asyncio.Semaphore(5)

def parse_time(time_str):
    hours, minutes, seconds = map(int, time_str.split(':'))
    return dt_time(hour=hours, minute=minutes, second=seconds)

START_TIME = parse_time(os.getenv('START_TIME'))
END_TIME = parse_time(os.getenv('END_TIME'))

async def process_booking(booking):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –ø–æ—Ç–æ–∫–∞–º.
    """
    async with semaphore:
        booking_id, user_id, date, duration, time_slot, class_name, last_name, first_name, phone, room_number, status = booking

        booking_data = {
            "date": date,
            "duration": duration,
            "time": time_slot,
            "class_name": class_name,
            "last_name": last_name,
            "first_name": first_name,
            "phone": phone,
            "room_number": room_number
        }

        logging.info(f"üîÑ –ù–∞—á–∞–ª–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ {booking_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        success, final_class = await asyncio.to_thread(generate_booking_url, booking_data)

        if success:
            update_booking_status(booking_id, "success")
            if final_class == class_name:
                await bot.send_message(user_id, "‚úÖ –í–∞—à–µ –∑–∞–Ω—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ!")
            else:
                await bot.send_message(user_id, f"‚ö†Ô∏è –í–∞—à –∫–ª–∞—Å—Å –±—ã–ª –∑–∞–Ω—è—Ç, –≤–∞—Å –∑–∞–ø–∏—Å–∞–ª–∏ –≤ {final_class}.")
        else:
            update_booking_status(booking_id, "failed")
            await bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω—è—Ç–∏–µ.", disable_notification=True)

async def process_bookings():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –ø–æ—Ç–æ–∫–∞–º.
    """
    bookings = get_today_bookings()
    if bookings:
        tasks = [process_booking(booking) for booking in bookings]
        await asyncio.gather(*tasks)

def check_booking_page(booking_data):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
    –û—Ç–∫—Ä—ã–≤–∞–µ—Ç URL –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∏ –∏—â–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ (surname_input).
    –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω ‚Äì –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True.
    """
    class_type_1 = '18249588'
    class_type_2 = '18505562'
    # –°–ª–æ–≤–∞—Ä—å –∫–ª–∞—Å—Å–æ–≤ –±–µ–∑ "anyone"
    classes = {
        '0207': 3673411, '0209': 3712681, '0210': 3712682, '0211': 3712684, '0212': 3712686,
        '0213': 3712689, '0214': 3712690, '0215': 3712692, '0216': 3712693,
        '0218': 3712694, '0219': 3712695, '0220': 3712696, '0221': 3712697,
        '0222': 3712698, '0223': 3712699, '0224': 3712700, '0225': 3712701,
        '0226': 3712702, '0227': 3712703, '0228': 3712705, '0229': 3712707, '0230': 3712710,
        '0231': 3712713, '0232': 3712715, '0233': 3712716
    }
    try:
        dt_obj = datetime.strptime(booking_data["date"], "%Y-%d-%m")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞—Ç—ã: {e}")
        return False
    formatted_date = dt_obj.strftime("%y%d%m")

    try:
        dt_time_obj = datetime.strptime(booking_data["time"], "%H:%M")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return False
    formatted_time = dt_time_obj.strftime("%H%M")

    class_type = class_type_1 if booking_data["duration"] == '1 —á–∞—Å' else class_type_2
    desired_class = booking_data["class_name"]
    class_id = classes.get(desired_class)
    if not class_id:
         logging.error(f"–ö–ª–∞—Å—Å {desired_class} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–æ–≤–∞—Ä–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤.")
         return False
    url = f'https://n1340880.yclients.com/company/1219726/create-record/record?o=m{class_id}s{class_type}d{formatted_date}{formatted_time}'
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∞ {desired_class} –ø–æ —Å—Å—ã–ª–∫–µ {url}")

    options = Options()
    options.add_argument("--start-maximized")
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--log-level=3")
    options.add_argument("--disable-gpu")
    options.add_argument("--disable-logging")
    options.add_experimental_option("excludeSwitches", ['enable-logging', 'enable-automation'])
    options.add_experimental_option('useAutomationExtension', False)

    service = Service(CHROME_DRIVER_PATH)
    driver = webdriver.Chrome(service=service, options=options)

    try:
        driver.get(url)
        wait = WebDriverWait(driver, 5)
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏ ‚Äì –æ–¥–Ω–æ–≥–æ –∏–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø–∏—Å–∏
        input_element = wait.until(EC.presence_of_element_located(
            (By.CSS_SELECTOR, 'input[data-locator="surname_input"]')
        ))
        input_element_1 = wait.until(EC.presence_of_all_elements_located(
            (By.CSS_SELECTOR, 'input[data-locator="name_input"]')
        ))
        input_element_2 = wait.until(EC.presence_of_all_elements_located(
            (By.CSS_SELECTOR, 'input[data-locator="phone_input"]')
        ))
        if input_element or input_element_1 or input_element_2:
            logging.info("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏.")
            return True
    except Exception as e:
        logging.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
    finally:
        driver.quit()
    return False

async def scheduler():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:
    - –ñ–¥—ë—Ç –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ START_TIME, —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤ .env.
    - –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤—ã–±–∏—Ä–∞–µ—Ç –∑–∞—è–≤–∫—É –∏–∑ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö,
      —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç URL –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
    - –ö–∞–∫ —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ (–Ω–∞–π–¥–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω input),
      –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫.
    - –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é.
    """
    while True:
        now = datetime.now().time()
        today = datetime.today()
        next_start = datetime.combine(today, START_TIME)
        if now >= START_TIME:
            next_start += timedelta(days=1)
        sleep_time = (next_start - datetime.now()).total_seconds()
        logging.info(f"–û–∂–∏–¥–∞–Ω–∏–µ –¥–æ –Ω–∞—á–∞–ª–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {next_start.strftime('%Y-%m-%d %H:%M:%S')} ({sleep_time} —Å–µ–∫—É–Ω–¥)")
        await asyncio.sleep(sleep_time)

        logging.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥.")
        booking_page_available = False
        while not booking_page_available:
            bookings = get_today_bookings()
            if not bookings:
                logging.info("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è.")
                await asyncio.sleep(15)
                continue
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            random_booking = random.choice(bookings)
            booking_data = {
                "date": random_booking[2],
                "duration": random_booking[3],
                "time": random_booking[4],
                "class_name": random_booking[5],
                "last_name": random_booking[6],
                "first_name": random_booking[7],
                "phone": random_booking[8],
                "room_number": random_booking[9]
            }
            logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∑–∞—è–≤–∫–∏ id {random_booking[0]}")
            logging.info(f'–î–∞–Ω–Ω—ã–µ: {booking_data}')
            booking_page_available = await asyncio.to_thread(check_booking_page, booking_data)
            if booking_page_available:
                logging.info("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫.")
                await process_bookings()
                break
            else:
                logging.info("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –µ—â—ë –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥.")
                await asyncio.sleep(15)