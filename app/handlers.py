from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from app.database import save_booking, is_time_slot_taken, get_user_bookings, cancel_booking
from app.states import BookingState
import app.keyboards as kb
from aiogram.types import InlineKeyboardMarkup

router = Router()

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.set_state(BookingState.date)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è:", reply_markup=await kb.date_keyboard())

# --- –í—ã–±–æ—Ä –¥–∞—Ç—ã ---
@router.callback_query(BookingState.date, F.data.startswith('date_'))
async def date_handler(callback: CallbackQuery, state: FSMContext):
    await state.update_data(date=callback.data.split('_')[1])
    await state.set_state(BookingState.duration)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:", reply_markup=await kb.duration_keyboard())

# --- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ---
@router.callback_query(BookingState.duration, F.data == "go_back_date")
async def go_back_to_date(callback: CallbackQuery, state: FSMContext):
    await state.set_state(BookingState.date)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è:", reply_markup=await kb.date_keyboard())

# --- –í—ã–±–æ—Ä –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ---
@router.callback_query(BookingState.duration, F.data.startswith('duration_'))
async def duration_handler(callback: CallbackQuery, state: FSMContext):
    duration = "1 —á–∞—Å" if "1_hour" in callback.data else "2 —á–∞—Å–∞"
    await state.update_data(duration=duration)
    await state.set_state(BookingState.time)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è:", reply_markup=await kb.time_keyboard())

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏ ---
@router.callback_query(BookingState.time, F.data == "go_back_duration")
async def go_back_to_duration(callback: CallbackQuery, state: FSMContext):
    await state.set_state(BookingState.duration)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:", reply_markup=await kb.duration_keyboard())

# --- –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ ---
@router.callback_query(BookingState.time, F.data.startswith('time_'))
async def time_handler(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_time = callback.data.split('_')[1]
    if is_time_slot_taken(data["date"], selected_time, data.get("class_name", "anyone")):
        await callback.message.edit_text(
            "‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ.",
            reply_markup=await kb.restart_keyboard()
        )
        return
    await state.update_data(time=selected_time)
    await state.set_state(BookingState.class_name)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:", reply_markup=await kb.classes_builder())

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–ª–∞—Å—Å–∞ ---
@router.callback_query(BookingState.class_name, F.data == "go_back_time")
async def go_back_to_time(callback: CallbackQuery, state: FSMContext):
    await state.set_state(BookingState.time)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è:", reply_markup=await kb.time_keyboard())

# --- –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞ ---
@router.callback_query(BookingState.class_name, F.data.startswith('class_'))
async def class_handler(callback: CallbackQuery, state: FSMContext):
    await state.update_data(class_name=callback.data.split('_')[1])
    await state.set_state(BookingState.last_name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:", reply_markup=await kb.back_keyboard("go_back_class"))

# --- –í–≤–æ–¥ —Ñ–∞–º–∏–ª–∏–∏ ---
@router.message(BookingState.last_name)
async def last_name_handler(message: Message, state: FSMContext):
    await state.update_data(last_name=message.text)
    await state.set_state(BookingState.first_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=await kb.back_keyboard("go_back_last_name"))

# --- –í–≤–æ–¥ –∏–º–µ–Ω–∏ ---
@router.message(BookingState.first_name)
async def first_name_handler(message: Message, state: FSMContext):
    await state.update_data(first_name=message.text)
    await state.set_state(BookingState.phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã, –Ω–∞—á–Ω–∏—Ç–µ —Å —Ü–∏—Ñ—Ä—ã 9Ô∏è‚É£):", reply_markup=await kb.back_keyboard("go_back_first_name"))

# --- –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ---
@router.message(BookingState.phone)
async def phone_handler(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await state.set_state(BookingState.room_number)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã –∏ –∫–æ—Ä–ø—É—Å–∞:", reply_markup=await kb.back_keyboard("go_back_phone"))

# --- –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∫–æ–º–Ω–∞—Ç—ã ---
@router.message(BookingState.room_number)
async def room_number_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    data['user_id'] = message.from_user.id
    data['room_number'] = message.text  
    await state.update_data(data)
    confirmation_text = (
        f"‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n"
        f"üìÖ –î–∞—Ç–∞: {data['date']}\n"
        f"‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data['duration']}\n"
        f"‚è∞ –í—Ä–µ–º—è: {data['time']}\n"
        f"üè´ –ö–ª–∞—Å—Å: {data['class_name']}\n"
        f"üë§ –ò–º—è: {data['first_name']} {data['last_name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üö™ –ö–æ–º–Ω–∞—Ç–∞: {data['room_number']}\n"
    )
    await message.answer(confirmation_text, reply_markup=await kb.confirmation_keyboard())

# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ---
@router.callback_query(F.data == 'confirm_booking')
async def confirm_booking(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if 'user_id' not in data:
        data['user_id'] = callback.from_user.id
    if 'room_number' not in data:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä –∫–æ–º–Ω–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞.")
        await state.set_state(BookingState.room_number)
        return
    success = save_booking(data)
    if not success:
        await callback.message.edit_text(
            "‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ.",
            reply_markup=await kb.restart_keyboard()
        )
        return
    await state.clear()
    await callback.message.edit_text("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞.")

# --- –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ" ---
@router.callback_query(F.data == 'restart_booking')
async def restart_booking(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await cmd_start(callback.message, state)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤–æ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö ---
@router.callback_query(F.data.startswith('go_back_'))
async def go_back_handler(callback: CallbackQuery, state: FSMContext):
    back_step = {
        "go_back_date": (BookingState.date, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è:", kb.date_keyboard),
        "go_back_duration": (BookingState.duration, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:", kb.duration_keyboard),
        "go_back_time": (BookingState.time, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è:", kb.time_keyboard),
        "go_back_class": (BookingState.class_name, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å:", kb.classes_builder),
        "go_back_last_name": (BookingState.last_name, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:", lambda: kb.back_keyboard("go_back_class")),
        "go_back_first_name": (BookingState.first_name, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", lambda: kb.back_keyboard("go_back_last_name")),
        "go_back_phone": (BookingState.phone, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", lambda: kb.back_keyboard("go_back_first_name")),
        "go_back_room": (BookingState.room_number, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã –∏ –∫–æ—Ä–ø—É—Å–∞:", lambda: kb.back_keyboard("go_back_phone")),
    }
    step = callback.data
    if step in back_step:
        state_to_set, message_text, keyboard_func = back_step[step]
        await state.set_state(state_to_set)
        if isinstance(await keyboard_func(), InlineKeyboardMarkup):
            await callback.message.edit_text(message_text, reply_markup=await keyboard_func())
        else:
            await callback.message.answer(message_text, reply_markup=await keyboard_func())

# --- –ö–æ–º–∞–Ω–¥–∞ /my_bookings –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ ---
@router.message(Command("my_bookings"))
async def my_bookings(message: Message):
    bookings = get_user_bookings(message.from_user.id)
    if not bookings:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return
    if len(bookings) == 1:
        booking_id, date, time, class_name = bookings[0]
        await message.answer(
            f"üìÖ {date}, ‚è∞ {time}, üè´ {class_name}\n–•–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å?",
            reply_markup=await kb.cancel_booking_keyboard(booking_id)
        )
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã:", reply_markup=await kb.bookings_list_keyboard(bookings))

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏ ---
@router.callback_query(F.data.startswith("cancel_booking_"))
async def cancel_booking_handler(callback: CallbackQuery):
    booking_id = int(callback.data.split("_")[2])
    cancel_booking(booking_id)
    await callback.message.edit_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")